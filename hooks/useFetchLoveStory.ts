import { useState } from "react";

/**
 * @brief Fetches a love story based on user input.
 * @details This custom React hook manages state for fetching a love story
 *          generated by OpenAI. It provides a `fetchLoveStory` function that
 *          accepts user information as arguments and makes a POST request to
 *          the specified endpoint (`/api/openai`). Upon successful response,
 *          it updates the internal state with the received love story. In case
 *          of errors, it sets an error message in the state.
 *
 * @return An object containing:
 *          - `fetchLoveStory`: A function to fetch a love story based on user input.
 *          - `loveStory`: The fetched love story (initially an empty string).
 *          - `error`: An error message if an error occurred (initially an empty string).
 *
 * @throws An error if the API request fails.
 */
const useFetchLoveStory = () => {
  const [loveStory, setLoveStory] = useState("");
  const [error, setError] = useState("");

  const fetchLoveStory = async (
    userCity: string,
    userName: string,
    userGender: string,
    userOrientation: string,
    userTaste: string,
    userTarget: string,
    isQueer: boolean,
    isHot: boolean
  ) => {
    try {
      const response = await fetch("/api/openai", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userCity,
          userName,
          userGender,
          userOrientation,
          userTaste,
          userTarget,
          isQueer,
          isHot,
        }),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setLoveStory(data.result);
    } catch (error) {
      console.error("Failed to fetch OpenAI response:", error);
      setError("Failed to fetch response.");
    }
  };

  return { fetchLoveStory, loveStory, error };
};

export default useFetchLoveStory;
